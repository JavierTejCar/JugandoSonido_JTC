/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package reproductor;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Javier
 */
public class Reproductor extends javax.swing.JFrame {

    private File fichero;
    private Clip clip;
    private boolean play;
    private int loop;
    public static ImageIcon PAUSA = new ImageIcon("src/reproductor/stop.png");
    public static ImageIcon REPRODUCIR = new ImageIcon("src/reproductor/play.png");

    /**
     * Creates new form Reproductor
     */
    public Reproductor() {
        initComponents();
        play = false;
        loop = -1;
        cambiarEstadoBotones(false);
        try {
            clip = AudioSystem.getClip();
            clip.addLineListener((LineEvent le) -> {
                if (le.getFramePosition() >= clip.getFrameLength()) {
                    cmdReproducir.setText("Reproducir");
                    cambiarImagenes();
                    try {
                        clip.stop();
                        play = false;
                        clip.close();
                        clip.open(AudioSystem.getAudioInputStream(fichero));
                    } catch (UnsupportedAudioFileException | IOException | LineUnavailableException ex) {
                        Logger.getLogger(Reproductor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            });
        } catch (LineUnavailableException ex) {
            Logger.getLogger(Reproductor.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdSeleccion = new javax.swing.JButton();
        lblImg = new javax.swing.JLabel();
        lblNombreArchivo = new javax.swing.JLabel();
        cmdRepetir = new javax.swing.JButton();
        cmdReproducir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmdSeleccion.setText("Selecciona archivo");
        cmdSeleccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSeleccionActionPerformed(evt);
            }
        });

        cmdRepetir.setText("Repetir");
        cmdRepetir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRepetirActionPerformed(evt);
            }
        });

        cmdReproducir.setText("Reproducir");
        cmdReproducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdReproducirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmdRepetir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdReproducir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdSeleccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblImg, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 220, Short.MAX_VALUE))
                    .addComponent(lblNombreArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblNombreArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdSeleccion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cmdReproducir)
                        .addGap(18, 18, 18)
                        .addComponent(cmdRepetir)))
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdSeleccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSeleccionActionPerformed
        try {
            // TODO add your handling code here:
            JFileChooser selector = new JFileChooser(".");
            selector.setAcceptAllFileFilterUsed(false);
            FileNameExtensionFilter filter;
            for (AudioFileFormat.Type audioFileType : AudioSystem.getAudioFileTypes()) {
                filter = new FileNameExtensionFilter("Audio (." + audioFileType.getExtension() + ")", audioFileType.getExtension());
                selector.addChoosableFileFilter(filter);
            }

            selector.showOpenDialog(this);
            this.fichero = selector.getSelectedFile();
            lblNombreArchivo.setText(fichero.getName());
            if (clip.isOpen()) {
                clip.close();
            }
            clip.open(AudioSystem.getAudioInputStream(fichero));
            cambiarEstadoBotones(true);
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException | NullPointerException ex) {
            Logger.getLogger(Reproductor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmdSeleccionActionPerformed

    private void cmdReproducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReproducirActionPerformed
        try {
            reproduccion();
        } catch (UnsupportedAudioFileException | LineUnavailableException | IOException ex) {
            Logger.getLogger(Reproductor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmdReproducirActionPerformed

    private void cmdRepetirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRepetirActionPerformed
        // TODO add your handling code here:
        try {
            loop = Integer.parseInt(JOptionPane.showInputDialog(this, "Â¿Cuantas veces quieres repetirlo?"));
            reproduccion(loop);
        } catch (LineUnavailableException | UnsupportedAudioFileException | IOException | InterruptedException | NullPointerException ex) {
            Logger.getLogger(Reproductor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmdRepetirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reproductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reproductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reproductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reproductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Reproductor().setVisible(true);
        });
    }

    private void reproduccion() throws UnsupportedAudioFileException, LineUnavailableException, IOException {
        play = !play;
        if (play) {
            cambiarImagenes();
            cmdReproducir.setText("Pausar");
            clip.start();
        } else if (!(play && clip.isRunning())) {
            cambiarImagenes();
            cmdReproducir.setText("Reproducir");
            clip.stop();
        }

    }

    private void reproduccion(int rep) throws LineUnavailableException, UnsupportedAudioFileException, IOException, InterruptedException {
        play = true;
        cambiarImagenes();
        clip.setFramePosition(clip.getFramePosition());
        clip.loop(rep);
        while (clip.isRunning()) {

            Thread.sleep(1);
        }
        play = false;
        clip.stop();

    }

    private void cambiarEstadoBotones(boolean b) {
        cmdRepetir.setEnabled(b);
        cmdReproducir.setEnabled(b);
    }

    private void cambiarImagenes() {
        Image img;
        img = (play ? REPRODUCIR : PAUSA).getImage();
        ImageIcon iconoEscalado = new ImageIcon(img.getScaledInstance(lblImg.getWidth(), lblImg.getHeight(), Image.SCALE_SMOOTH));
        lblImg.setIcon(iconoEscalado);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdRepetir;
    private javax.swing.JButton cmdReproducir;
    private javax.swing.JButton cmdSeleccion;
    private javax.swing.JLabel lblImg;
    private javax.swing.JLabel lblNombreArchivo;
    // End of variables declaration//GEN-END:variables

}
